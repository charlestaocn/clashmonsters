{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Game.ts"],"names":["GameResult","Canvas","Component","KeyCode","Vec2","_decorator","Node","AppRoot","requireAppRootAsync","delay","GameAudioAdapter","Background","MagnetCollisionSystem","PlayerCollisionSystem","PlayerProjectileCollisionSystem","WeaponCollisionSystem","KeyboardInput","MultiInput","VirtualJoystic","ItemAttractor","ItemManager","GameModalLauncher","Pauser","GameUI","EnemyDeathEffectSpawner","EnemyManager","EnemyProjectileLauncher","MetaUpgrades","Player","PlayerData","HaloProjectileLauncher","ProjectileData","ProjectileLauncher","WaveProjectileLauncher","Upgrader","MetaUpgradeType","ccclass","property","Game","playerCollisionSystem","haloProjectileLauncher","horizontalProjectileLauncher","diagonalProjectileLauncher","enemyAxeProjectileLauncher","enemyMagicOrbProjectileLauncher","itemAttractor","gamePauser","gameResult","timeAlive","Instance","instance","start","pause","blackScreen","active","play","userData","settings","translationData","testValues","setup","resume","ScreenFader","playClose","hasExitManually","player","Health","IsAlive","score","exitGame","update","deltaTime","IsPaused","gameTick","enemyManager","background","gameUI","updateTimeAlive","MainCamera","node","setWorldPosition","worldPosition","gameCanvas","cameraComponent","metaUpgrades","game","virtualJoystic","init","wasd","KEY_W","KEY_S","KEY_A","KEY_D","arrowKeys","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","multiInput","createPlayerData","deathEffectSpawner","collisionDelay","itemManager","Weapon","projectileData","damage","getUpgradeValue","OverallDamage","pierces","ProjectilePiercing","haloProjectileLauncherComponent","haloLauncher","horizontalProjectileLauncherComponent","horizontalLauncher","diagonalProjectileLauncherComponent","diagonalLauncher","enemyAxeProjectileLauncherComponent","axeLauncher","enemyMagicOrbProjectileLauncherComponent","magicOrbLauncher","Magnet","upgrader","upgrades","modalLauncher","ModalWindowManager","items","startTime","Level","addXp","startXP","gameAudioAdapter","playerData","Object","assign","maxHp","defaultHP","requiredXP","speed","MovementSpeed","regenerationDelay","xpMultiplier","XPGatherer","goldMultiplier","GoldGatherer","weapon","strikeDelay","magnetDuration","goldCoins"],"mappings":"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","sourcesContent":["import { Canvas, Component, KeyCode, Vec2, _decorator, Node, approx } from \"cc\";\r\nimport { AppRoot } from \"../AppRoot/AppRoot\";\r\nimport { requireAppRootAsync } from \"../AppRoot/AppRootUtils\";\r\nimport { delay } from \"../Services/Utils/AsyncUtils\";\r\nimport { GameAudioAdapter } from \"./Audio/GameAudioAdapter\";\r\nimport { Background } from \"./Background/Background\";\r\nimport { MagnetCollisionSystem } from \"./Collision/MagnetCollisionSystem\";\r\nimport { PlayerCollisionSystem } from \"./Collision/PlayerCollisionSystem\";\r\nimport { PlayerProjectileCollisionSystem } from \"./Collision/PlayerProjectileCollisionSystem\";\r\nimport { WeaponCollisionSystem } from \"./Collision/WeaponCollisionSystem\";\r\nimport { GameSettings, PlayerSettings } from \"./Data/GameSettings\";\r\nimport { TranslationData } from \"./Data/TranslationData\";\r\nimport { UserData } from \"./Data/UserData\";\r\nimport { KeyboardInput } from \"./Input/KeyboardInput\";\r\nimport { MultiInput } from \"./Input/MultiInput\";\r\nimport { VirtualJoystic } from \"./Input/VirtualJoystic\";\r\nimport { ItemAttractor } from \"./Items/ItemAttractor\";\r\nimport { ItemManager } from \"./Items/ItemManager\";\r\nimport { GameModalLauncher } from \"./ModalWIndows/GameModalLauncher\";\r\nimport { Pauser } from \"./Pauser\";\r\nimport { TestValues } from \"./TestGameRunner\";\r\nimport { GameUI } from \"./UI/GameUI\";\r\nimport { EnemyDeathEffectSpawner } from \"./Unit/Enemy/EnemyDeathEffectSpawner/EnemyDeathEffectSpawner\";\r\nimport { EnemyManager } from \"./Unit/Enemy/EnemyManager\";\r\nimport { EnemyProjectileLauncher } from \"./Unit/Enemy/ProjectileLauncher.cs/EnemyProjectileLauncher\";\r\nimport { MetaUpgrades } from \"./Unit/MetaUpgrades/MetaUpgrades\";\r\nimport { Player, PlayerData } from \"./Unit/Player/Player\";\r\nimport { HaloProjectileLauncher } from \"./Projectile/ProjectileLauncher/HaloProjectileLauncher\";\r\nimport { ProjectileData } from \"./Projectile/ProjectileLauncher/ProjectileData\";\r\nimport { ProjectileLauncher } from \"./Projectile/ProjectileLauncher/ProjectileLauncher\";\r\nimport { WaveProjectileLauncher } from \"./Projectile/ProjectileLauncher/WaveProjectileLauncher\";\r\nimport { Upgrader } from \"./Upgrades/Upgrader\";\r\nimport { MetaUpgradeType } from \"./Upgrades/UpgradeType\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"Game\")\r\nexport class Game extends Component {\r\n    private static instance: Game;\r\n\r\n    @property(VirtualJoystic) private virtualJoystic: VirtualJoystic;\r\n    @property(Player) private player: Player;\r\n    @property(ProjectileLauncher) private haloProjectileLauncherComponent: ProjectileLauncher;\r\n    @property(ProjectileLauncher) private horizontalProjectileLauncherComponent: ProjectileLauncher;\r\n    @property(ProjectileLauncher) private diagonalProjectileLauncherComponent: ProjectileLauncher;\r\n    @property(ProjectileLauncher) private enemyAxeProjectileLauncherComponent: ProjectileLauncher;\r\n    @property(ProjectileLauncher) private enemyMagicOrbProjectileLauncherComponent: ProjectileLauncher;\r\n    @property(EnemyManager) private enemyManager: EnemyManager;\r\n    @property(EnemyDeathEffectSpawner) private deathEffectSpawner: EnemyDeathEffectSpawner;\r\n    @property(ItemManager) private itemManager: ItemManager;\r\n    @property(GameUI) private gameUI: GameUI;\r\n    @property(Canvas) private gameCanvas: Canvas;\r\n    @property(Background) private background: Background;\r\n    @property(GameAudioAdapter) private gameAudioAdapter: GameAudioAdapter;\r\n    @property(Node) private blackScreen: Node;\r\n\r\n    private playerCollisionSystem: PlayerCollisionSystem;\r\n    private haloProjectileLauncher: HaloProjectileLauncher;\r\n    private horizontalProjectileLauncher: WaveProjectileLauncher;\r\n    private diagonalProjectileLauncher: WaveProjectileLauncher;\r\n\r\n    private enemyAxeProjectileLauncher: EnemyProjectileLauncher;\r\n    private enemyMagicOrbProjectileLauncher: EnemyProjectileLauncher;\r\n\r\n    private itemAttractor: ItemAttractor;\r\n\r\n    private gamePauser: Pauser = new Pauser();\r\n    private gameResult: GameResult;\r\n\r\n    private timeAlive = 0;\r\n\r\n    public static get Instance(): Game {\r\n        return this.instance;\r\n    }\r\n\r\n    public start(): void {\r\n        this.gamePauser.pause();\r\n        Game.instance = this;\r\n        this.blackScreen.active = true;\r\n    }\r\n\r\n    public async play(userData: UserData, settings: GameSettings, translationData: TranslationData, testValues?: TestValues): Promise<GameResult> {\r\n        await this.setup(userData, settings, translationData, testValues);\r\n        this.gamePauser.resume();\r\n        this.blackScreen.active = false;\r\n        AppRoot.Instance.ScreenFader.playClose();\r\n        while (!this.gameResult.hasExitManually && this.player.Health.IsAlive) await delay(100);\r\n        this.gamePauser.pause();\r\n        Game.instance = null;\r\n        this.gameResult.score = this.timeAlive;\r\n        return this.gameResult;\r\n    }\r\n\r\n    public exitGame(): void {\r\n        this.gameResult.hasExitManually = true;\r\n    }\r\n\r\n    public update(deltaTime: number): void {\r\n        if (this.gamePauser.IsPaused) return;\r\n\r\n        this.player.gameTick(deltaTime);\r\n        this.playerCollisionSystem.gameTick(deltaTime);\r\n        this.enemyManager.gameTick(deltaTime);\r\n        this.haloProjectileLauncher.gameTick(deltaTime);\r\n        this.horizontalProjectileLauncher.gameTick(deltaTime);\r\n        this.diagonalProjectileLauncher.gameTick(deltaTime);\r\n        this.enemyAxeProjectileLauncher.gameTick(deltaTime);\r\n        this.enemyMagicOrbProjectileLauncher.gameTick(deltaTime);\r\n        this.itemAttractor.gameTick(deltaTime);\r\n        this.background.gameTick();\r\n\r\n        this.timeAlive += deltaTime;\r\n        this.gameUI.updateTimeAlive(this.timeAlive);\r\n\r\n        AppRoot.Instance.MainCamera.node.setWorldPosition(this.player.node.worldPosition);\r\n        this.gameUI.node.setWorldPosition(this.player.node.worldPosition);\r\n    }\r\n\r\n    private async setup(userData: UserData, settings: GameSettings, translationData: TranslationData, testValues: TestValues): Promise<void> {\r\n        await requireAppRootAsync();\r\n        \r\n        this.gameCanvas.cameraComponent = AppRoot.Instance.MainCamera;\r\n\r\n        this.gameResult = new GameResult();\r\n        const metaUpgrades = new MetaUpgrades(userData.game.metaUpgrades, settings.metaUpgrades);\r\n\r\n        this.virtualJoystic.init();\r\n\r\n        const wasd = new KeyboardInput(KeyCode.KEY_W, KeyCode.KEY_S, KeyCode.KEY_A, KeyCode.KEY_D);\r\n        const arrowKeys = new KeyboardInput(KeyCode.ARROW_UP, KeyCode.ARROW_DOWN, KeyCode.ARROW_LEFT, KeyCode.ARROW_RIGHT);\r\n        const multiInput: MultiInput = new MultiInput([this.virtualJoystic, wasd, arrowKeys]);\r\n\r\n        this.player.init(multiInput, this.createPlayerData(settings.player, metaUpgrades));\r\n        this.enemyManager.init(this.player.node, settings.enemyManager);\r\n        this.deathEffectSpawner.init(this.enemyManager);\r\n\r\n        this.playerCollisionSystem = new PlayerCollisionSystem(this.player, settings.player.collisionDelay, this.itemManager);\r\n        new WeaponCollisionSystem(this.player.Weapon);\r\n\r\n        const projectileData = new ProjectileData();\r\n        projectileData.damage = 1 + metaUpgrades.getUpgradeValue(MetaUpgradeType.OverallDamage);\r\n        projectileData.pierces = 1 + metaUpgrades.getUpgradeValue(MetaUpgradeType.ProjectilePiercing);\r\n\r\n        this.haloProjectileLauncher = new HaloProjectileLauncher(\r\n            this.haloProjectileLauncherComponent,\r\n            this.player.node,\r\n            settings.player.haloLauncher,\r\n            projectileData\r\n        );\r\n\r\n        this.horizontalProjectileLauncher = new WaveProjectileLauncher(\r\n            this.horizontalProjectileLauncherComponent,\r\n            this.player.node,\r\n            [new Vec2(0, 1), new Vec2(-0.1, 0.8), new Vec2(0.1, 0.8)],\r\n            settings.player.horizontalLauncher,\r\n            projectileData\r\n        );\r\n\r\n        this.diagonalProjectileLauncher = new WaveProjectileLauncher(\r\n            this.diagonalProjectileLauncherComponent,\r\n            this.player.node,\r\n            [new Vec2(-0.5, -0.5), new Vec2(0.5, -0.5)],\r\n            settings.player.diagonalLauncher,\r\n            projectileData\r\n        );\r\n\r\n        this.enemyAxeProjectileLauncher = new EnemyProjectileLauncher(\r\n            this.enemyAxeProjectileLauncherComponent,\r\n            this.player.node,\r\n            this.enemyManager,\r\n            settings.enemyManager.axeLauncher\r\n        );\r\n\r\n        this.enemyMagicOrbProjectileLauncher = new EnemyProjectileLauncher(\r\n            this.enemyMagicOrbProjectileLauncherComponent,\r\n            this.player.node,\r\n            this.enemyManager,\r\n            settings.enemyManager.magicOrbLauncher\r\n        );\r\n\r\n        new PlayerProjectileCollisionSystem([this.haloProjectileLauncher, this.horizontalProjectileLauncher, this.diagonalProjectileLauncher]);\r\n\r\n        this.itemAttractor = new ItemAttractor(this.player.node, 100);\r\n        new MagnetCollisionSystem(this.player.Magnet, this.itemAttractor);\r\n\r\n        const upgrader = new Upgrader(\r\n            this.player,\r\n            this.horizontalProjectileLauncher,\r\n            this.haloProjectileLauncher,\r\n            this.diagonalProjectileLauncher,\r\n            settings.upgrades\r\n        );\r\n        const modalLauncher = new GameModalLauncher(AppRoot.Instance.ModalWindowManager, this.player, this.gamePauser, upgrader, translationData);\r\n\r\n        this.itemManager.init(this.enemyManager, this.player, this.gameResult, modalLauncher, settings.items);\r\n        this.gameUI.init(this.player, modalLauncher, this.itemManager, this.gameResult);\r\n        this.background.init(this.player.node);\r\n\r\n        if (testValues) {\r\n            this.timeAlive += testValues.startTime;\r\n            this.player.Level.addXp(testValues.startXP);\r\n        }\r\n\r\n        this.gameAudioAdapter.init(\r\n            this.player,\r\n            this.enemyManager,\r\n            this.itemManager,\r\n            this.horizontalProjectileLauncher,\r\n            this.diagonalProjectileLauncher,\r\n            this.haloProjectileLauncher\r\n        );\r\n    }\r\n\r\n    private createPlayerData(settings: PlayerSettings, metaUpgrades: MetaUpgrades): PlayerData {\r\n        const playerData: PlayerData = Object.assign(new PlayerData(), settings);\r\n\r\n        playerData.maxHp = metaUpgrades.getUpgradeValue(MetaUpgradeType.Health) + settings.defaultHP;\r\n        playerData.requiredXP = settings.requiredXP;\r\n        playerData.speed = metaUpgrades.getUpgradeValue(MetaUpgradeType.MovementSpeed) + settings.speed;\r\n        playerData.regenerationDelay = settings.regenerationDelay;\r\n        playerData.xpMultiplier = metaUpgrades.getUpgradeValue(MetaUpgradeType.XPGatherer) + 1;\r\n        playerData.goldMultiplier = metaUpgrades.getUpgradeValue(MetaUpgradeType.GoldGatherer) + 1;\r\n\r\n        playerData.damage = metaUpgrades.getUpgradeValue(MetaUpgradeType.OverallDamage) + settings.weapon.damage;\r\n        playerData.strikeDelay = settings.weapon.strikeDelay;\r\n\r\n        playerData.magnetDuration = settings.magnetDuration;\r\n\r\n        return playerData;\r\n    }\r\n}\r\n\r\nexport class GameResult {\r\n    public hasExitManually = false;\r\n    public goldCoins = 0;\r\n    public score = 0;\r\n}\r\n"]}