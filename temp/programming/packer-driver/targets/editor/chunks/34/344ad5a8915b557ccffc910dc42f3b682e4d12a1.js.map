{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/TestGameRunner.ts"],"names":["TestValues","CCInteger","Component","_decorator","AppRoot","GameRunner","delay","UserData","Game","ccclass","property","TestGameRunner","start","Instance","IsRunning","playTestGameAsync","testUserData","game","metaUpgrades","healthLevel","maxHpLevel","overallDamageLevel","bonusDamageLevel","projectilePiercingLevel","movementSpeedLevel","xpGathererLevel","goldGathererLevel","settings","getTimeModifiedSettings","Settings","play","TranslationData","startTime","startXP","spawners","enemyManager","circularEnemySpawners","individualEnemySpawners","waveEnemySpawners","spawner","common","startDelay","stopDelay"],"mappings":"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","sourcesContent":["import { CCInteger, Component, _decorator } from \"cc\";\r\nimport { AppRoot } from \"../AppRoot/AppRoot\";\r\nimport { GameRunner } from \"../Menu/GameRunner\";\r\nimport { delay } from \"../Services/Utils/AsyncUtils\";\r\nimport { GameSettings, ISpawner } from \"./Data/GameSettings\";\r\nimport { UserData } from \"./Data/UserData\";\r\nimport { Game } from \"./Game\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"TestGameRunner\")\r\nexport class TestGameRunner extends Component {\r\n    @property(CCInteger) private startTime = 0;\r\n    @property(CCInteger) private startXP = 0;\r\n\r\n    @property(CCInteger) private maxHpLevel = 0;\r\n    @property(CCInteger) private bonusDamageLevel = 0;\r\n    @property(CCInteger) private projectilePiercingLevel = 0;\r\n    @property(CCInteger) private movementSpeedLevel = 0;\r\n    @property(CCInteger) private xpGathererLevel = 0;\r\n    @property(CCInteger) private goldGathererLevel = 0;\r\n\r\n    public start(): void {\r\n        if (GameRunner.Instance.IsRunning) return;\r\n        this.playTestGameAsync();\r\n    }\r\n\r\n    public async playTestGameAsync(): Promise<void> {\r\n        while (Game.Instance == null || AppRoot.Instance == null) await delay(100);\r\n\r\n        const testUserData = new UserData();\r\n        testUserData.game.metaUpgrades.healthLevel = this.maxHpLevel;\r\n        testUserData.game.metaUpgrades.overallDamageLevel = this.bonusDamageLevel;\r\n        testUserData.game.metaUpgrades.projectilePiercingLevel = this.projectilePiercingLevel;\r\n        testUserData.game.metaUpgrades.movementSpeedLevel = this.movementSpeedLevel;\r\n        testUserData.game.metaUpgrades.xpGathererLevel = this.xpGathererLevel;\r\n        testUserData.game.metaUpgrades.goldGathererLevel = this.goldGathererLevel;\r\n\r\n        const settings = this.getTimeModifiedSettings(AppRoot.Instance.Settings);\r\n        Game.Instance.play(testUserData, settings, AppRoot.Instance.TranslationData, { startTime: this.startTime, startXP: this.startXP });\r\n    }\r\n\r\n    private getTimeModifiedSettings(settings: GameSettings): GameSettings {\r\n        const spawners: ISpawner[] = [\r\n            ...settings.enemyManager.circularEnemySpawners,\r\n            ...settings.enemyManager.individualEnemySpawners,\r\n            ...settings.enemyManager.waveEnemySpawners\r\n        ];\r\n\r\n        for (const spawner of spawners) {\r\n            spawner.common.startDelay -= this.startTime;\r\n            spawner.common.stopDelay -= this.startTime;\r\n        }\r\n\r\n        return settings;\r\n    }\r\n}\r\n\r\nexport class TestValues {\r\n    public startTime = 0;\r\n    public startXP = 0;\r\n}\r\n"]}