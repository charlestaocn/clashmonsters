{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Unit/Enemy/EnemyManager.ts"],"names":["Component","_decorator","EnemyMovementType","FollowTargetEnemyMover","PeriodicFollowMovers","WaveEnemyMover","CircularEnemySpawner","EnemySpawner","IndividualEnemySpawner","WaveEnemySpawner","ccclass","property","EnemyManager","movementTypeToMover","Map","spawners","init","targetNode","settings","enemySpawner","enemies","EnemyAddedEvent","on","onEnemyAdded","EnemyRemovedEvent","onEnemyRemoved","individualSpawnerSettings","individualEnemySpawners","individualSpawner","push","circularSpawnerSettings","circularEnemySpawners","circularSpawner","waveSpawnerSettings","waveEnemySpawners","waveSpawner","set","Follow","Launch","PeriodicFollow","periodicFollowMovers","gameTick","deltaTime","spawner","kvp","enemy","getEnemyMover","addEnemy","removeEnemy","has","MovementType","get","Error"],"mappings":"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","sourcesContent":["import { Component, Node, _decorator } from \"cc\";\r\nimport { ISignal } from \"../../../Services/EventSystem/ISignal\";\r\nimport { EnemyManagerSettings } from \"../../Data/GameSettings\";\r\nimport { Enemy } from \"./Enemy\";\r\nimport { EnemyMovementType } from \"./EnemyMovementType\";\r\nimport { IEnemyMover } from \"./EnemyMover/EnemyMover\";\r\nimport { FollowTargetEnemyMover } from \"./EnemyMover/FollowTargetEnemyMover\";\r\nimport { PeriodicFollowMovers } from \"./EnemyMover/PeriodicFollow/PeriodicFollowMovers\";\r\nimport { WaveEnemyMover } from \"./EnemyMover/WaveEnemyMover\";\r\nimport { CircularEnemySpawner } from \"./EnemySpawner/CircularEnemySpawner\";\r\nimport { DelayedEnemySpawner } from \"./EnemySpawner/DelayedEnemySpawner\";\r\nimport { EnemySpawner } from \"./EnemySpawner/EnemySpawner\";\r\nimport { IndividualEnemySpawner } from \"./EnemySpawner/IndividualEnemySpawner\";\r\nimport { WaveEnemySpawner } from \"./EnemySpawner/WaveEnemySpawner\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"EnemyManager\")\r\nexport class EnemyManager extends Component {\r\n    @property(EnemySpawner) private enemySpawner: EnemySpawner;\r\n\r\n    private movementTypeToMover: Map<EnemyMovementType, IEnemyMover> = new Map<EnemyMovementType, IEnemyMover>();\r\n\r\n    private spawners: DelayedEnemySpawner[] = [];\r\n\r\n    public init(targetNode: Node, settings: EnemyManagerSettings): void {\r\n        this.enemySpawner.init(targetNode, settings.enemies);\r\n        this.enemySpawner.EnemyAddedEvent.on(this.onEnemyAdded, this);\r\n        this.enemySpawner.EnemyRemovedEvent.on(this.onEnemyRemoved, this);\r\n\r\n        for (const individualSpawnerSettings of settings.individualEnemySpawners) {\r\n            const individualSpawner = new IndividualEnemySpawner(this.enemySpawner, individualSpawnerSettings);\r\n            this.spawners.push(individualSpawner);\r\n        }\r\n\r\n        for (const circularSpawnerSettings of settings.circularEnemySpawners) {\r\n            const circularSpawner = new CircularEnemySpawner(this.enemySpawner, circularSpawnerSettings);\r\n            this.spawners.push(circularSpawner);\r\n        }\r\n\r\n        for (const waveSpawnerSettings of settings.waveEnemySpawners) {\r\n            const waveSpawner = new WaveEnemySpawner(this.enemySpawner, waveSpawnerSettings);\r\n            this.spawners.push(waveSpawner);\r\n        }\r\n\r\n        this.movementTypeToMover.set(EnemyMovementType.Follow, new FollowTargetEnemyMover(targetNode));\r\n        this.movementTypeToMover.set(EnemyMovementType.Launch, new WaveEnemyMover(targetNode));\r\n        this.movementTypeToMover.set(EnemyMovementType.PeriodicFollow, new PeriodicFollowMovers(targetNode, settings.periodicFollowMovers));\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        for (const spawner of this.spawners) {\r\n            spawner.gameTick(deltaTime);\r\n        }\r\n\r\n        for (const kvp of this.movementTypeToMover) {\r\n            kvp[1].gameTick(deltaTime);\r\n        }\r\n    }\r\n\r\n    public get EnemyAddedEvent(): ISignal<Enemy> {\r\n        return this.enemySpawner.EnemyAddedEvent;\r\n    }\r\n\r\n    public get EnemyRemovedEvent(): ISignal<Enemy> {\r\n        return this.enemySpawner.EnemyRemovedEvent;\r\n    }\r\n\r\n    private onEnemyAdded(enemy: Enemy): void {\r\n        this.getEnemyMover(enemy).addEnemy(enemy);\r\n    }\r\n\r\n    private onEnemyRemoved(enemy: Enemy): void {\r\n        this.getEnemyMover(enemy).removeEnemy(enemy);\r\n    }\r\n\r\n    private getEnemyMover(enemy: Enemy): IEnemyMover {\r\n        if (this.movementTypeToMover.has(enemy.MovementType)) {\r\n            return this.movementTypeToMover.get(enemy.MovementType);\r\n        }\r\n\r\n        throw new Error(\"Does not have mover of type \" + enemy.MovementType);\r\n    }\r\n}\r\n"]}