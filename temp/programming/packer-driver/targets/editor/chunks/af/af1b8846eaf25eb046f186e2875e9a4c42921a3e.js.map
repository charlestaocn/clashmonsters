{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Projectile/ProjectileLauncher/ProjectileLauncher.ts"],"names":["_decorator","Component","Prefab","Signal","ObjectPool","getDegreeAngleFromDirection","ccclass","property","ProjectileLauncher","projectileCollisionEvent","projectileLaunchedEvent","projectileDamage","projectilePierces","projectileLifetime","projectileSpeed","projectilePool","projectiles","directions","expireTimes","currentTime","ProjectileCollisionEvent","ProjectileLaunchedEvent","init","projectilePrefab","node","gameTick","deltaTime","tryRemoveExpiredProjectiles","moveAllProjectiles","fireProjectiles","startPosition","fireDirections","direction","fireProjectile","normalize","projectile","borrow","setup","x","y","setWorldPosition","active","ContactBeginEvent","on","onProjectileCollision","PiercesDepletedEvent","onPiercesDepleted","push","trigger","i","length","removeProjectile","index","indexOf","Error","off","return","splice","newPosition","worldPosition","projectlieCollision"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Vec2, Vec3 } from \"cc\";\r\nimport { Empty } from \"../../../Menu/ModalWindows/Upgrades/UpgradesModalWindow\";\r\nimport { ISignal } from \"../../../Services/EventSystem/ISignal\";\r\nimport { Signal } from \"../../../Services/EventSystem/Signal\";\r\nimport { ObjectPool } from \"../../../Services/ObjectPool\";\r\nimport { getDegreeAngleFromDirection } from \"../../../Services/Utils/MathUtils\";\r\nimport { IProjectileLauncherSignaler } from \"../IProjectileLauncherSignaler\";\r\nimport { Projectile } from \"../Projectile\";\r\nimport { ProjectileCollision } from \"../ProjectileCollision\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"ProjectileLauncher\")\r\nexport class ProjectileLauncher extends Component implements IProjectileLauncherSignaler {\r\n    @property(Prefab) private projectilePrefab: Prefab;\r\n    private projectileCollisionEvent = new Signal<ProjectileCollision>();\r\n    private projectileLaunchedEvent = new Signal();\r\n\r\n    private projectileDamage: number;\r\n    private projectilePierces: number;\r\n    private projectileLifetime: number;\r\n    private projectileSpeed: number;\r\n\r\n    private projectilePool: ObjectPool<Projectile>;\r\n\r\n    private projectiles: Projectile[] = [];\r\n    private directions: Vec2[] = [];\r\n    private expireTimes: number[] = [];\r\n    private currentTime = 0;\r\n\r\n    public get ProjectileCollisionEvent(): ISignal<ProjectileCollision> {\r\n        return this.projectileCollisionEvent;\r\n    }\r\n\r\n    public get ProjectileLaunchedEvent(): ISignal {\r\n        return this.projectileLaunchedEvent;\r\n    }\r\n\r\n    public init(projectileLifetime: number, projectileSpeed: number, projectileDamage: number, projectilePierces: number): void {\r\n        this.projectileLifetime = projectileLifetime;\r\n        this.projectileSpeed = projectileSpeed;\r\n        this.projectileDamage = projectileDamage;\r\n        this.projectilePierces = projectilePierces;\r\n\r\n        this.projectilePool = new ObjectPool<Projectile>(this.projectilePrefab, this.node, 6, \"Projectile\");\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        this.currentTime += deltaTime;\r\n        this.tryRemoveExpiredProjectiles();\r\n        this.moveAllProjectiles(deltaTime);\r\n    }\r\n\r\n    public fireProjectiles(startPosition: Vec3, fireDirections: Vec2[]): void {\r\n        for (const direction of fireDirections) {\r\n            this.fireProjectile(startPosition, direction);\r\n        }\r\n    }\r\n\r\n    private fireProjectile(startPosition: Vec3, direction: Vec2): void {\r\n        direction = direction.normalize();\r\n        const projectile: Projectile = this.projectilePool.borrow();\r\n        projectile.setup(this.projectileDamage, this.projectilePierces, getDegreeAngleFromDirection(direction.x, direction.y));\r\n        projectile.node.setWorldPosition(startPosition);\r\n        projectile.node.active = true;\r\n        projectile.ContactBeginEvent.on(this.onProjectileCollision, this);\r\n        projectile.PiercesDepletedEvent.on(this.onPiercesDepleted, this);\r\n\r\n        this.projectiles.push(projectile);\r\n        this.directions.push(direction);\r\n        this.expireTimes.push(this.currentTime + this.projectileLifetime);\r\n\r\n        this.projectileLaunchedEvent.trigger();\r\n    }\r\n\r\n    private tryRemoveExpiredProjectiles(): void {\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            if (this.currentTime < this.expireTimes[i]) break; // the oldest particles are at the start of the array\r\n\r\n            const projectile: Projectile = this.projectiles[i];\r\n            this.removeProjectile(projectile, i);\r\n            i--; // Check the same index\r\n        }\r\n    }\r\n\r\n    private onPiercesDepleted(projectile: Projectile): void {\r\n        const index = this.projectiles.indexOf(projectile);\r\n        if (index === -1) {\r\n            throw new Error(\"Projectile not found!\");\r\n        }\r\n\r\n        this.removeProjectile(projectile, index);\r\n    }\r\n\r\n    private removeProjectile(projectile: Projectile, index: number): void {\r\n        projectile.ContactBeginEvent.off(this.onProjectileCollision);\r\n        projectile.PiercesDepletedEvent.off(this.onPiercesDepleted);\r\n\r\n        this.projectilePool.return(projectile);\r\n\r\n        this.projectiles.splice(index, 1);\r\n        this.directions.splice(index, 1);\r\n        this.expireTimes.splice(index, 1);\r\n    }\r\n\r\n    private moveAllProjectiles(deltaTime: number): void {\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            const newPosition: Vec3 = this.projectiles[i].node.worldPosition;\r\n            newPosition.x += this.directions[i].x * deltaTime * this.projectileSpeed;\r\n            newPosition.y += this.directions[i].y * deltaTime * this.projectileSpeed;\r\n\r\n            this.projectiles[i].node.setWorldPosition(newPosition);\r\n        }\r\n    }\r\n\r\n    private onProjectileCollision(projectlieCollision: ProjectileCollision): void {\r\n        this.projectileCollisionEvent.trigger(projectlieCollision);\r\n    }\r\n}\r\n"]}