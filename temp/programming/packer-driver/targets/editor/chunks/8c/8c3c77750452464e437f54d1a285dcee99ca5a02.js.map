{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Projectile/ProjectileLauncher/HaloProjectileLauncher.ts"],"names":["HaloProjectileLauncher","Vec2","Signal","GameTimer","roundToOneDecimal","constructor","launcher","playerNode","settings","projectileData","currentUpgrade","defaultCooldown","cooldownDivisorPerUpgrade","directions","fireTimer","projectilesLaunchedEvent","cooldown","angle","Math","PI","projectilesToSpawn","i","x","sin","y","cos","push","normalize","init","projectileLifetime","projectileSpeed","damage","pierces","ProjectileCollisionEvent","ProjectileLaunchedEvent","ProjectilesLaunchedEvent","gameTick","deltaTime","tryFinishPeriod","fireProjectiles","worldPosition","trigger","upgrade"],"mappings":";;;2HAWaA,sB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXEC,MAAAA,I,OAAAA,I;;AAENC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,iB,iBAAAA,iB;;;;;;;;;wCAOIJ,sB,GAAN,MAAMA,sBAAN,CAAoE;AAShEK,QAAAA,WAAW,CACNC,QADM,EAENC,UAFM,EAGdC,QAHc,EAIdC,cAJc,EAKhB;AAAA,eAbMC,cAaN,GAbuB,CAavB;AAAA,eAZMC,eAYN,GAZwB,CAYxB;AAAA,eAXMC,yBAWN,GAXkC,CAWlC;AAAA,eAVMC,UAUN,GAV2B,EAU3B;AAAA,eATMC,SASN,GATkB;AAAA;AAAA,sCAAc,CAAd,CASlB;AAAA,eAPMC,wBAON,GAPiC;AAAA;AAAA,iCAOjC;AAAA,eAJUT,QAIV,GAJUA,QAIV;AAAA,eAHUC,UAGV,GAHUA,UAGV;AACE,eAAKI,eAAL,GAAuBH,QAAQ,CAACF,QAAT,CAAkBU,QAAzC;AACA,eAAKJ,yBAAL,GAAiCJ,QAAQ,CAACI,yBAA1C;AAEA,gBAAMK,KAAa,GAAI,IAAIC,IAAI,CAACC,EAAV,GAAgBX,QAAQ,CAACY,kBAA/C;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACY,kBAA7B,EAAiDC,CAAC,EAAlD,EAAsD;AAClD,kBAAMC,CAAS,GAAG;AAAA;AAAA,wDAAkBJ,IAAI,CAACK,GAAL,CAASN,KAAK,GAAGI,CAAjB,CAAlB,CAAlB;AACA,kBAAMG,CAAS,GAAG;AAAA;AAAA,wDAAkBN,IAAI,CAACO,GAAL,CAASR,KAAK,GAAGI,CAAjB,CAAlB,CAAlB;AACA,iBAAKR,UAAL,CAAgBa,IAAhB,CAAqB,IAAIzB,IAAJ,CAASqB,CAAT,EAAYE,CAAZ,EAAeG,SAAf,EAArB;AACH;;AAEDrB,UAAAA,QAAQ,CAACsB,IAAT,CAAcpB,QAAQ,CAACF,QAAT,CAAkBuB,kBAAhC,EAAoDrB,QAAQ,CAACF,QAAT,CAAkBwB,eAAtE,EAAuFrB,cAAc,CAACsB,MAAtG,EAA8GtB,cAAc,CAACuB,OAA7H;AACH;;AAEkC,YAAxBC,wBAAwB,GAAiC;AAChE,iBAAO,KAAK3B,QAAL,CAAc2B,wBAArB;AACH;;AAEiC,YAAvBC,uBAAuB,GAAY;AAC1C,iBAAO,KAAK5B,QAAL,CAAc4B,uBAArB;AACH;;AAEkC,YAAxBC,wBAAwB,GAAY;AAC3C,iBAAO,KAAKpB,wBAAZ;AACH;;AAEMqB,QAAAA,QAAQ,CAACC,SAAD,EAA0B;AACrC,cAAI,KAAK3B,cAAL,IAAuB,CAA3B,EAA8B;AAE9B,eAAKJ,QAAL,CAAc8B,QAAd,CAAuBC,SAAvB;AACA,eAAKvB,SAAL,CAAesB,QAAf,CAAwBC,SAAxB;;AAEA,cAAI,KAAKvB,SAAL,CAAewB,eAAf,EAAJ,EAAsC;AAClC,iBAAKhC,QAAL,CAAciC,eAAd,CAA8B,KAAKhC,UAAL,CAAgBiC,aAA9C,EAA6D,KAAK3B,UAAlE;AACA,iBAAKE,wBAAL,CAA8B0B,OAA9B;AACH;AACJ;;AAEMC,QAAAA,OAAO,GAAS;AACnB,eAAKhC,cAAL;AACA,eAAKI,SAAL,GAAiB;AAAA;AAAA,sCAAc,KAAKH,eAAL,IAAwB,KAAKC,yBAAL,GAAiC,KAAKF,cAA9D,CAAd,CAAjB;AACH;;AAxDsE,O","sourcesContent":["import { Node, Vec2 } from \"cc\";\r\nimport { ISignal } from \"../../../Services/EventSystem/ISignal\";\r\nimport { Signal } from \"../../../Services/EventSystem/Signal\";\r\nimport { GameTimer } from \"../../../Services/GameTimer\";\r\nimport { roundToOneDecimal } from \"../../../Services/Utils/MathUtils\";\r\nimport { HaloLauncherSettings } from \"../../Data/GameSettings\";\r\nimport { IProjectileLauncherSignaler } from \"../IProjectileLauncherSignaler\";\r\nimport { ProjectileCollision } from \"../ProjectileCollision\";\r\nimport { ProjectileData } from \"./ProjectileData\";\r\nimport { ProjectileLauncher } from \"./ProjectileLauncher\";\r\n\r\nexport class HaloProjectileLauncher implements IProjectileLauncherSignaler {\r\n    private currentUpgrade = 0;\r\n    private defaultCooldown = 0;\r\n    private cooldownDivisorPerUpgrade = 0;\r\n    private directions: Vec2[] = [];\r\n    private fireTimer = new GameTimer(0);\r\n\r\n    private projectilesLaunchedEvent = new Signal();\r\n\r\n    public constructor(\r\n        private launcher: ProjectileLauncher,\r\n        private playerNode: Node,\r\n        settings: HaloLauncherSettings,\r\n        projectileData: ProjectileData\r\n    ) {\r\n        this.defaultCooldown = settings.launcher.cooldown;\r\n        this.cooldownDivisorPerUpgrade = settings.cooldownDivisorPerUpgrade;\r\n\r\n        const angle: number = (2 * Math.PI) / settings.projectilesToSpawn;\r\n\r\n        for (let i = 0; i < settings.projectilesToSpawn; i++) {\r\n            const x: number = roundToOneDecimal(Math.sin(angle * i));\r\n            const y: number = roundToOneDecimal(Math.cos(angle * i));\r\n            this.directions.push(new Vec2(x, y).normalize());\r\n        }\r\n\r\n        launcher.init(settings.launcher.projectileLifetime, settings.launcher.projectileSpeed, projectileData.damage, projectileData.pierces);\r\n    }\r\n\r\n    public get ProjectileCollisionEvent(): ISignal<ProjectileCollision> {\r\n        return this.launcher.ProjectileCollisionEvent;\r\n    }\r\n\r\n    public get ProjectileLaunchedEvent(): ISignal {\r\n        return this.launcher.ProjectileLaunchedEvent;\r\n    }\r\n\r\n    public get ProjectilesLaunchedEvent(): ISignal {\r\n        return this.projectilesLaunchedEvent;\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        if (this.currentUpgrade == 0) return;\r\n\r\n        this.launcher.gameTick(deltaTime);\r\n        this.fireTimer.gameTick(deltaTime);\r\n\r\n        if (this.fireTimer.tryFinishPeriod()) {\r\n            this.launcher.fireProjectiles(this.playerNode.worldPosition, this.directions);\r\n            this.projectilesLaunchedEvent.trigger();\r\n        }\r\n    }\r\n\r\n    public upgrade(): void {\r\n        this.currentUpgrade++;\r\n        this.fireTimer = new GameTimer(this.defaultCooldown / (this.cooldownDivisorPerUpgrade * this.currentUpgrade));\r\n    }\r\n}\r\n"]}