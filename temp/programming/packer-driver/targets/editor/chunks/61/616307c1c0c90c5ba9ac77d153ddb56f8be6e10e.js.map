{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Unit/Player/Player.ts"],"names":["PlayerData","Animation","Node","BoxCollider2D","Component","Vec2","Vec3","_decorator","Sprite","Color","delay","UnitHealth","UnitLevel","Magnet","PlayerRegeneration","PlayerUI","Weapon","ccclass","property","Player","input","health","level","regeneration","speed","isMoveAnimationPlaying","init","data","maxHp","requiredXP","xpMultiplier","regenerationDelay","weapon","strikeDelay","damage","magnet","magnetDuration","HealthPointsChangeEvent","on","animateHpChange","playerUI","Health","Level","Regeneration","Collider","collider","gameTick","deltaTime","move","IsAlive","movement","getAxis","equals","ZERO","x","y","newPosition","node","worldPosition","setWorldPosition","animation","play","playerGraphics","setScale","hpChange","sprite","color","RED","GREEN","WHITE","goldMultiplier"],"mappings":"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","sourcesContent":["import { Animation, Node, BoxCollider2D, Collider2D, Component, Vec2, Vec3, _decorator, Details, Sprite, Color } from \"cc\";\r\nimport { delay } from \"../../../Services/Utils/AsyncUtils\";\r\nimport { IInput } from \"../../Input/IInput\";\r\nimport { UnitHealth } from \"../UnitHealth\";\r\nimport { UnitLevel } from \"../UnitLevel\";\r\nimport { Magnet } from \"./Magnet\";\r\nimport { PlayerRegeneration } from \"./PlayerRegeneration\";\r\nimport { PlayerUI } from \"./PlayerUI/PlayerUI\";\r\nimport { Weapon } from \"./Weapon/Weapon\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"Player\")\r\nexport class Player extends Component {\r\n    @property(BoxCollider2D) private collider: BoxCollider2D;\r\n    @property(PlayerUI) private playerUI: PlayerUI;\r\n    @property(Weapon) private weapon: Weapon;\r\n    @property(Magnet) private magnet: Magnet;\r\n    @property(Node) private playerGraphics: Node;\r\n    @property(Animation) private animation: Animation;\r\n    @property(Sprite) private sprite: Sprite;\r\n\r\n    private input: IInput;\r\n    private health: UnitHealth;\r\n    private level: UnitLevel;\r\n    private regeneration: PlayerRegeneration;\r\n    private speed: number;\r\n\r\n    private isMoveAnimationPlaying = false;\r\n\r\n    public init(input: IInput, data: PlayerData): void {\r\n        this.input = input;\r\n        this.health = new UnitHealth(data.maxHp);\r\n        this.level = new UnitLevel(data.requiredXP, data.xpMultiplier);\r\n        this.regeneration = new PlayerRegeneration(this.health, data.regenerationDelay);\r\n        this.speed = data.speed;\r\n\r\n        this.weapon.init(data.strikeDelay, data.damage);\r\n        this.magnet.init(data.magnetDuration);\r\n        this.health.HealthPointsChangeEvent.on(this.animateHpChange, this);\r\n        this.playerUI.init(this.health);\r\n    }\r\n\r\n    public get Health(): UnitHealth {\r\n        return this.health;\r\n    }\r\n\r\n    public get Level(): UnitLevel {\r\n        return this.level;\r\n    }\r\n\r\n    public get Weapon(): Weapon {\r\n        return this.weapon;\r\n    }\r\n\r\n    public get Magnet(): Magnet {\r\n        return this.magnet;\r\n    }\r\n\r\n    public get Regeneration(): PlayerRegeneration {\r\n        return this.regeneration;\r\n    }\r\n\r\n    public get Collider(): Collider2D {\r\n        return this.collider;\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        this.move(deltaTime);\r\n        this.weapon.gameTick(deltaTime);\r\n        this.magnet.gameTick(deltaTime);\r\n        this.regeneration.gameTick(deltaTime);\r\n    }\r\n\r\n    private move(deltaTime: number): void {\r\n        if (!this.health.IsAlive) return;\r\n\r\n        const movement: Vec2 = this.input.getAxis();\r\n        if (!movement.equals(Vec2.ZERO)) {\r\n            movement.x *= deltaTime * this.speed;\r\n            movement.y *= deltaTime * this.speed;\r\n\r\n            const newPosition: Vec3 = this.node.worldPosition;\r\n            newPosition.x += movement.x;\r\n            newPosition.y += movement.y;\r\n\r\n            this.node.setWorldPosition(newPosition);\r\n\r\n            if (!this.isMoveAnimationPlaying) {\r\n                this.isMoveAnimationPlaying = true;\r\n                this.animation.play(\"Move\");\r\n            }\r\n\r\n            if (movement.x < 0) {\r\n                this.playerGraphics.setScale(new Vec3(1, 1, 1));\r\n            } else if (0 < movement.x) {\r\n                this.playerGraphics.setScale(new Vec3(-1, 1, 1));\r\n            }\r\n        } else {\r\n            if (this.isMoveAnimationPlaying) {\r\n                this.isMoveAnimationPlaying = false;\r\n                this.animation.play(\"Idle\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private async animateHpChange(hpChange: number): Promise<void> {\r\n        if (hpChange < 0) {\r\n            this.sprite.color = Color.RED;\r\n        } else {\r\n            this.sprite.color = Color.GREEN;\r\n        }\r\n\r\n        await delay(100);\r\n        this.sprite.color = Color.WHITE;\r\n\r\n        if (!this.health.IsAlive) {\r\n            this.animation.play(\"Die\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class PlayerData {\r\n    public requiredXP: number[] = [];\r\n    public speed = 0;\r\n    public maxHp = 0;\r\n    public regenerationDelay = 0;\r\n    public xpMultiplier = 0;\r\n    public goldMultiplier = 0;\r\n\r\n    // Weapon\r\n    public strikeDelay = 0;\r\n    public damage = 0;\r\n\r\n    // Magnet\r\n    public magnetDuration = 0;\r\n}\r\n"]}