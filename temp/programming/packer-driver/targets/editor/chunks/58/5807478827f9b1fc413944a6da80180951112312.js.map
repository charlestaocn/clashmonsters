{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Upgrades/Upgrader.ts"],"names":["Upgrader","UpgradeType","constructor","player","horizontalProjectileLauncher","haloProjectileLauncher","diagonalProjectileLauncher","settings","typeToAction","Map","typeToLevel","typeToMaxLevel","setTypeMaps","WeaponLength","upgradeWeaponLength","bind","maxWeaponLengthUpgrades","WeaponDamage","upgradeWeaponDamage","maxWeaponDamageUpgrades","HorizontalProjectile","upgradeHorizontalProjectileLauncher","maxHorizontalProjectileUpgrades","DiagonalProjectile","upgradeDiagonalProjectileLauncher","maxDiagonalProjectileUpgrades","HaloProjectlie","upgradeHaloProjectileLauncher","maxHaloProjectileUpgrades","Regeneration","upgradeRegeneration","maxRegenerationUpgrades","upgradeSkill","type","has","Error","isMaxLevel","get","level","set","getAvailableUpgrades","availableUpgrades","Set","key","keys","add","upgradeType","action","maxLevel","Weapon","upgrade"],"mappings":"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","sourcesContent":["import { UpgradeSettings } from \"../Data/GameSettings\";\r\nimport { Player } from \"../Unit/Player/Player\";\r\nimport { HaloProjectileLauncher } from \"../Projectile/ProjectileLauncher/HaloProjectileLauncher\";\r\nimport { WaveProjectileLauncher } from \"../Projectile/ProjectileLauncher/WaveProjectileLauncher\";\r\nimport { UpgradeType } from \"./UpgradeType\";\r\n\r\nexport class Upgrader {\r\n    private typeToAction: Map<UpgradeType, () => void> = new Map<UpgradeType, () => void>();\r\n    private typeToLevel: Map<UpgradeType, number> = new Map<UpgradeType, number>();\r\n    private typeToMaxLevel: Map<UpgradeType, number> = new Map<UpgradeType, number>();\r\n\r\n    public constructor(\r\n        private player: Player,\r\n        private horizontalProjectileLauncher: WaveProjectileLauncher,\r\n        private haloProjectileLauncher: HaloProjectileLauncher,\r\n        private diagonalProjectileLauncher: WaveProjectileLauncher,\r\n        settings: UpgradeSettings\r\n    ) {\r\n        this.setTypeMaps(UpgradeType.WeaponLength, this.upgradeWeaponLength.bind(this), settings.maxWeaponLengthUpgrades);\r\n        this.setTypeMaps(UpgradeType.WeaponDamage, this.upgradeWeaponDamage.bind(this), settings.maxWeaponDamageUpgrades);\r\n        this.setTypeMaps(\r\n            UpgradeType.HorizontalProjectile,\r\n            this.upgradeHorizontalProjectileLauncher.bind(this),\r\n            settings.maxHorizontalProjectileUpgrades\r\n        );\r\n        this.setTypeMaps(UpgradeType.DiagonalProjectile, this.upgradeDiagonalProjectileLauncher.bind(this), settings.maxDiagonalProjectileUpgrades);\r\n        this.setTypeMaps(UpgradeType.HaloProjectlie, this.upgradeHaloProjectileLauncher.bind(this), settings.maxHaloProjectileUpgrades);\r\n        this.setTypeMaps(UpgradeType.Regeneration, this.upgradeRegeneration.bind(this), settings.maxRegenerationUpgrades);\r\n    }\r\n\r\n    public upgradeSkill(type: UpgradeType): void {\r\n        if (!this.typeToAction.has(type)) throw new Error(\"Upgrade does not have \" + type);\r\n        if (this.isMaxLevel(type)) throw new Error(\"Upgrade is already at max level \" + type);\r\n\r\n        this.typeToAction.get(type)();\r\n        const level: number = this.typeToLevel.get(type);\r\n        this.typeToLevel.set(type, level + 1);\r\n    }\r\n\r\n    public getAvailableUpgrades(): Set<UpgradeType> {\r\n        const availableUpgrades: Set<UpgradeType> = new Set<UpgradeType>();\r\n        for (const key of this.typeToAction.keys()) {\r\n            if (!this.isMaxLevel(key)) {\r\n                availableUpgrades.add(key);\r\n            }\r\n        }\r\n\r\n        return availableUpgrades;\r\n    }\r\n\r\n    private setTypeMaps(upgradeType: UpgradeType, action: () => void, maxLevel: number): void {\r\n        this.typeToAction.set(upgradeType, action);\r\n        this.typeToLevel.set(upgradeType, 0);\r\n        this.typeToMaxLevel.set(upgradeType, maxLevel);\r\n    }\r\n\r\n    private upgradeWeaponLength(): void {\r\n        this.player.Weapon.upgradeWeaponLength();\r\n    }\r\n\r\n    private upgradeWeaponDamage(): void {\r\n        this.player.Weapon.upgradeWeaponDamage();\r\n    }\r\n\r\n    private upgradeHorizontalProjectileLauncher(): void {\r\n        this.horizontalProjectileLauncher.upgrade();\r\n    }\r\n\r\n    private upgradeDiagonalProjectileLauncher(): void {\r\n        this.diagonalProjectileLauncher.upgrade();\r\n    }\r\n\r\n    private upgradeHaloProjectileLauncher(): void {\r\n        this.haloProjectileLauncher.upgrade();\r\n    }\r\n\r\n    private upgradeRegeneration(): void {\r\n        this.player.Regeneration.upgrade();\r\n    }\r\n\r\n    private isMaxLevel(type: UpgradeType): boolean {\r\n        return this.typeToMaxLevel.get(type) <= this.typeToLevel.get(type);\r\n    }\r\n}\r\n"]}