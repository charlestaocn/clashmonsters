{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Services/ModalWindowSystem/ModalWindowManager.ts"],"names":["Component","instantiate","Prefab","_decorator","ccclass","property","ModalWindowManager","showModal","name","params","console","log","windowPrefab","availableWindows","find","w","windowNode","setParent","node","modalWindow","getComponent","result","runAsync","destroy","closeModel","modalWindowName","getChildByName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAmBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,U,OAAAA,U;;;;;;;;;OAGxC;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,O,GAAsBF,U;;oCAGfG,kB,WADZF,OAAO,CAAC,oBAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,2BAFb,MACaI,kBADb,SACwCN,SADxC,CACkD;AAAA;AAAA;;AAAA;AAAA;;AAIxB,cAATO,SAAS,CAAmBC,IAAnB,EAAiCC,MAAjC,EAAoE;AACtFC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,IAA1B,EAAgCC,MAAhC;AACA,gBAAMG,YAAoB,GAAG,KAAKC,gBAAL,CAAsBC,IAAtB,CAA4BC,CAAD,IAAOA,CAAC,CAACP,IAAF,KAAWA,IAA7C,CAA7B;AACA,gBAAMQ,UAAgB,GAAGf,WAAW,CAACW,YAAD,CAApC;AACAI,UAAAA,UAAU,CAACC,SAAX,CAAqB,KAAKC,IAA1B;AAEA,gBAAMC,WAA0C,GAAkCH,UAAU,CAACI,YAAX,CAAwBZ,IAAxB,CAAlF;AACA,gBAAMa,MAAe,GAAG,MAAMF,WAAW,CAACG,QAAZ,CAAqBb,MAArB,CAA9B;AACAO,UAAAA,UAAU,CAACO,OAAX;AAEA,iBAAOF,MAAP;AACH;;AAGMG,QAAAA,UAAU,CAACC,eAAD,EAAmC;AAChD,gBAAMT,UAAgB,GAAG,KAAKE,IAAL,CAAUQ,cAAV,CAAyBD,eAAzB,CAAzB;;AACA,cAAIT,UAAJ,EAAgB;AACZA,YAAAA,UAAU,CAACO,OAAX;AACA,mBAAO,IAAP;AACH;AACJ;;AAxB6C,O;;;;;iBACS,E","sourcesContent":["import {Component, instantiate, Node, Prefab, _decorator} from \"cc\";\r\nimport {ModalWindow} from \"./ModalWindow\";\r\n\r\nconst {ccclass, property} = _decorator;\r\n\r\n@ccclass(\"ModalWindowManager\")\r\nexport class ModalWindowManager extends Component {\r\n    @property(Prefab) private availableWindows: Prefab[] = [];\r\n\r\n\r\n    public async showModal<TParams, TResult>(name: string, params: TParams): Promise<TResult> {\r\n        console.log(\"SHOW MODAL\", name, params);\r\n        const windowPrefab: Prefab = this.availableWindows.find((w) => w.name === name);\r\n        const windowNode: Node = instantiate(windowPrefab);\r\n        windowNode.setParent(this.node);\r\n\r\n        const modalWindow: ModalWindow<TParams, TResult> = <ModalWindow<TParams, TResult>>windowNode.getComponent(name);\r\n        const result: TResult = await modalWindow.runAsync(params);\r\n        windowNode.destroy();\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    public closeModel(modalWindowName: string): boolean {\r\n        const windowNode: Node = this.node.getChildByName(modalWindowName);\r\n        if (windowNode) {\r\n            windowNode.destroy();\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\n"]}