{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Collision/PlayerCollisionSystem.ts"],"names":["PlayerCollisionSystem","Contact2DType","Signal","GameTimer","GroupType","Item","Projectile","Enemy","constructor","player","collisionDelay","itemManager","playerContacts","collisionTimer","groupToResolver","Map","itemPickedUpEvent","Collider","on","BEGIN_CONTACT","onPlayerContactBegin","END_CONTACT","onPlayerContactEnd","set","ENEMY","resolveEnemyContact","bind","ENEMY_PROJECTILE","resolveEnemyProjectileContact","ITEM","resolveItemContact","gameTick","deltaTime","tryFinishPeriod","resolveAllContacts","ItemPickedUpEvent","_selfCollider","otherCollider","push","resolveContact","index","indexOf","splice","i","length","Health","IsAlive","has","group","get","console","log","enemyCollider","damage","node","getComponent","Damage","projectile","pierce","xpCollider","pickupItem"],"mappings":"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","sourcesContent":["import { Collider2D, Contact2DType, Node } from \"cc\";\r\nimport { ISignal } from \"../../Services/EventSystem/ISignal\";\r\nimport { Signal } from \"../../Services/EventSystem/Signal\";\r\nimport { GameTimer } from \"../../Services/GameTimer\";\r\nimport { GroupType } from \"../GroupType\";\r\nimport { Item } from \"../Items/Item\";\r\nimport { ItemManager } from \"../Items/ItemManager\";\r\nimport { Projectile } from \"../Projectile/Projectile\";\r\nimport { Enemy } from \"../Unit/Enemy/Enemy\";\r\nimport { Player } from \"../Unit/Player/Player\";\r\n\r\nexport class PlayerCollisionSystem {\r\n    private playerContacts: Collider2D[] = [];\r\n    private collisionTimer: GameTimer;\r\n\r\n    private groupToResolver: Map<number, (collider: Collider2D) => void> = new Map<number, (collider: Collider2D) => void>();\r\n\r\n    private itemPickedUpEvent = new Signal<Node>();\r\n\r\n    public constructor(private player: Player, collisionDelay: number, private itemManager: ItemManager) {\r\n        this.player = player;\r\n\r\n        player.Collider.on(Contact2DType.BEGIN_CONTACT, this.onPlayerContactBegin, this);\r\n        player.Collider.on(Contact2DType.END_CONTACT, this.onPlayerContactEnd, this);\r\n\r\n        this.collisionTimer = new GameTimer(collisionDelay);\r\n\r\n        this.groupToResolver.set(GroupType.ENEMY, this.resolveEnemyContact.bind(this));\r\n        this.groupToResolver.set(GroupType.ENEMY_PROJECTILE, this.resolveEnemyProjectileContact.bind(this));\r\n        this.groupToResolver.set(GroupType.ITEM, this.resolveItemContact.bind(this));\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        this.collisionTimer.gameTick(deltaTime);\r\n        if (this.collisionTimer.tryFinishPeriod()) {\r\n            this.resolveAllContacts();\r\n        }\r\n    }\r\n\r\n    public get ItemPickedUpEvent(): ISignal<Node> {\r\n        return this.itemPickedUpEvent;\r\n    }\r\n\r\n    private onPlayerContactBegin(_selfCollider: Collider2D, otherCollider: Collider2D): void {\r\n        this.playerContacts.push(otherCollider);\r\n        this.resolveContact(otherCollider);\r\n    }\r\n\r\n    private onPlayerContactEnd(_selfCollider: Collider2D, otherCollider: Collider2D): void {\r\n        const index: number = this.playerContacts.indexOf(otherCollider);\r\n        if (index != -1) {\r\n            this.playerContacts.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private resolveAllContacts(): void {\r\n        for (let i = 0; i < this.playerContacts.length; i++) {\r\n            this.resolveContact(this.playerContacts[i]);\r\n        }\r\n    }\r\n\r\n    private resolveContact(otherCollider: Collider2D): void {\r\n        if (!this.player.Health.IsAlive) return;\r\n\r\n        if (this.groupToResolver.has(otherCollider.group)) {\r\n            this.groupToResolver.get(otherCollider.group)(otherCollider);\r\n        } else {\r\n            console.log(\"Collided with undefined group: \" + otherCollider.group);\r\n        }\r\n    }\r\n\r\n    private resolveEnemyContact(enemyCollider: Collider2D): void {\r\n        const damage: number = enemyCollider.node.getComponent(Enemy).Damage;\r\n        console.log(\"Collided with enemy: Damage: \" + damage);\r\n        this.player.Health.damage(damage);\r\n    }\r\n\r\n    private resolveEnemyProjectileContact(enemyCollider: Collider2D): void {\r\n        const projectile = enemyCollider.node.getComponent(Projectile);\r\n        const damage: number = projectile.Damage;\r\n        projectile.pierce();\r\n        console.log(\"Collided with enemy projectile: Damage: \" + damage);\r\n\r\n        this.player.Health.damage(damage);\r\n    }\r\n\r\n    private resolveItemContact(xpCollider: Collider2D): void {\r\n        console.log(\"Collided with item\");\r\n        this.itemManager.pickupItem(xpCollider.node.getComponent(Item));\r\n    }\r\n}\r\n"]}