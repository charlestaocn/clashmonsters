{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Background/Background.ts"],"names":["_decorator","Component","Prefab","instantiate","randomRangeInt","Vec3","SCREEN_HALF_HEIGHT","SCREEN_HALF_WIDTH","ccclass","property","Background","targetNode","instancedBackgrounds","rows","columns","nodeSize","playerGridPosX","playerGridPosY","init","i","rowNodes","u","randomIndex","backgroundPrefabs","length","backgroundNode","setParent","node","x","y","setWorldPosition","push","gameTick","tryTileX","tryTileY","Math","round","worldPosition","columnIndex","instancedNode","newPosition","splice","unshift","rowIndex","nodesInRow"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, randomRangeInt, Vec3 } from \"cc\";\r\nimport { SCREEN_HALF_HEIGHT, SCREEN_HALF_WIDTH, SCREEN_HEIGHT, SCREEN_WIDTH } from \"../Data/GameConstants\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"Background\")\r\nexport class Background extends Component {\r\n    @property(Prefab) private backgroundPrefabs: Prefab[] = [];\r\n\r\n    private targetNode: Node;\r\n    private instancedBackgrounds: Node[][] = [];\r\n\r\n    private rows = 3;\r\n    private columns = 3;\r\n    private nodeSize = 512;\r\n\r\n    private playerGridPosX = 0;\r\n    private playerGridPosY = 0;\r\n\r\n    public init(targetNode: Node): void {\r\n        this.targetNode = targetNode;\r\n\r\n        for (let i = 0; i < this.rows; i++) {\r\n            const rowNodes: Node[] = [];\r\n            for (let u = 0; u < this.columns; u++) {\r\n                const randomIndex = randomRangeInt(0, this.backgroundPrefabs.length);\r\n                const backgroundNode = instantiate(this.backgroundPrefabs[randomIndex]);\r\n                backgroundNode.setParent(this.node);\r\n\r\n                const x = u * this.nodeSize - this.nodeSize + SCREEN_HALF_WIDTH;\r\n                const y = i * this.nodeSize - this.nodeSize + SCREEN_HALF_HEIGHT;\r\n                backgroundNode.setWorldPosition(new Vec3(x, y, 0));\r\n\r\n                rowNodes.push(backgroundNode);\r\n            }\r\n\r\n            this.instancedBackgrounds.push(rowNodes);\r\n        }\r\n    }\r\n\r\n    public gameTick(): void {\r\n        this.tryTileX();\r\n        this.tryTileY();\r\n    }\r\n\r\n    private tryTileX(): void {\r\n        const playerGridPosX = Math.round((this.targetNode.worldPosition.x - SCREEN_HALF_WIDTH) / this.nodeSize);\r\n\r\n        if (playerGridPosX < this.playerGridPosX) {\r\n            // move the last column to the left\r\n            const columnIndex = this.columns - 1;\r\n            for (let i = 0; i < this.rows; i++) {\r\n                const instancedNode = this.instancedBackgrounds[i][columnIndex];\r\n                const newPosition: Vec3 = instancedNode.worldPosition;\r\n                newPosition.x -= this.columns * this.nodeSize;\r\n\r\n                instancedNode.setWorldPosition(newPosition);\r\n\r\n                this.instancedBackgrounds[i].splice(columnIndex, 1);\r\n                this.instancedBackgrounds[i].unshift(instancedNode);\r\n            }\r\n        } else if (this.playerGridPosX < playerGridPosX) {\r\n            // move the first column to the right\r\n            const columnIndex = 0;\r\n            for (let i = 0; i < this.rows; i++) {\r\n                const instancedNode = this.instancedBackgrounds[i][columnIndex];\r\n                const newPosition: Vec3 = instancedNode.worldPosition;\r\n                newPosition.x += this.columns * this.nodeSize;\r\n\r\n                instancedNode.setWorldPosition(newPosition);\r\n\r\n                this.instancedBackgrounds[i].splice(columnIndex, 1);\r\n                this.instancedBackgrounds[i].push(instancedNode);\r\n            }\r\n        }\r\n\r\n        this.playerGridPosX = playerGridPosX;\r\n    }\r\n\r\n    private tryTileY(): void {\r\n        const playerGridPosY = Math.round((this.targetNode.worldPosition.y - SCREEN_HALF_HEIGHT) / this.nodeSize);\r\n\r\n        if (playerGridPosY < this.playerGridPosY) {\r\n            // move the last row down\r\n            const rowIndex = this.rows - 1;\r\n            const nodesInRow: Node[] = [];\r\n            for (let i = 0; i < this.columns; i++) {\r\n                const instancedNode = this.instancedBackgrounds[rowIndex][i];\r\n                const newPosition: Vec3 = instancedNode.worldPosition;\r\n                newPosition.y -= this.rows * this.nodeSize;\r\n\r\n                instancedNode.setWorldPosition(newPosition);\r\n                nodesInRow.push(instancedNode);\r\n            }\r\n\r\n            this.instancedBackgrounds.splice(rowIndex, 1);\r\n            this.instancedBackgrounds.unshift(nodesInRow);\r\n        } else if (this.playerGridPosY < playerGridPosY) {\r\n            // move the first row up\r\n            const rowIndex = 0;\r\n            const nodesInRow: Node[] = [];\r\n            for (let i = 0; i < this.columns; i++) {\r\n                const instancedNode = this.instancedBackgrounds[rowIndex][i];\r\n                const newPosition: Vec3 = instancedNode.worldPosition;\r\n                newPosition.y += this.rows * this.nodeSize;\r\n\r\n                instancedNode.setWorldPosition(newPosition);\r\n                nodesInRow.push(instancedNode);\r\n            }\r\n\r\n            this.instancedBackgrounds.splice(rowIndex, 1);\r\n            this.instancedBackgrounds.push(nodesInRow);\r\n        }\r\n\r\n        this.playerGridPosY = playerGridPosY;\r\n    }\r\n}\r\n"]}