{"version":3,"sources":["file:///C:/project/work/cocos/clashmonsters/assets/Scripts/Game/Projectile/ProjectileLauncher/WaveProjectileLauncher.ts"],"names":["WaveProjectileLauncher","GameTimer","delay","constructor","launcher","playerNode","directions","settings","projectileData","currentUpgrade","wavesToShootPerUpgrade","fireTimer","wavesToShoot","wavesDelayMs","cooldown","init","projectileLifetime","projectileSpeed","damage","pierces","ProjectileCollisionEvent","ProjectileLaunchedEvent","gameTick","deltaTime","tryFinishPeriod","fireProjectiles","upgrade","i","worldPosition"],"mappings":";;;iGAWaA,sB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARJC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,K,iBAAAA,K;;;;;;;;;wCAOIF,sB,GAAN,MAAMA,sBAAN,CAAoE;AAOhEG,QAAAA,WAAW,CACNC,QADM,EAENC,UAFM,EAGNC,UAHM,EAIdC,QAJc,EAKdC,cALc,EAMhB;AAAA,eAZMC,cAYN,GAZuB,CAYvB;AAAA,eAXMC,sBAWN,GAX+B,CAW/B;AAAA,eAVMC,SAUN;AAAA,eATMC,YASN;AAAA,eARMC,YAQN;AAAA,eALUT,QAKV,GALUA,QAKV;AAAA,eAJUC,UAIV,GAJUA,UAIV;AAAA,eAHUC,UAGV,GAHUA,UAGV;AACE,eAAKI,sBAAL,GAA8BH,QAAQ,CAACG,sBAAvC;AAEA,eAAKC,SAAL,GAAiB;AAAA;AAAA,sCAAcJ,QAAQ,CAACH,QAAT,CAAkBU,QAAhC,CAAjB;AACA,eAAKF,YAAL,GAAoBL,QAAQ,CAACH,QAAT,CAAkBQ,YAAtC;AACA,eAAKC,YAAL,GAAoBN,QAAQ,CAACH,QAAT,CAAkBS,YAAtC;AAEAT,UAAAA,QAAQ,CAACW,IAAT,CAAcR,QAAQ,CAACH,QAAT,CAAkBY,kBAAhC,EAAoDT,QAAQ,CAACH,QAAT,CAAkBa,eAAtE,EAAuFT,cAAc,CAACU,MAAtG,EAA8GV,cAAc,CAACW,OAA7H;AACH;;AAEkC,YAAxBC,wBAAwB,GAAiC;AAChE,iBAAO,KAAKhB,QAAL,CAAcgB,wBAArB;AACH;;AAEiC,YAAvBC,uBAAuB,GAAY;AAC1C,iBAAO,KAAKjB,QAAL,CAAciB,uBAArB;AACH;;AAEMC,QAAAA,QAAQ,CAACC,SAAD,EAA0B;AACrC,cAAI,KAAKd,cAAL,IAAuB,CAA3B,EAA8B;AAE9B,eAAKL,QAAL,CAAckB,QAAd,CAAuBC,SAAvB;AACA,eAAKZ,SAAL,CAAeW,QAAf,CAAwBC,SAAxB;;AAEA,cAAI,KAAKZ,SAAL,CAAea,eAAf,EAAJ,EAAsC;AAClC,iBAAKC,eAAL;AACH;AACJ;;AAEMC,QAAAA,OAAO,GAAS;AACnB,eAAKjB,cAAL;AACA,eAAKG,YAAL,IAAqB,KAAKF,sBAA1B;AACH;;AAEae,QAAAA,eAAe,GAAkB;AAAA;;AAAA;AAC3C,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAACf,YAAzB,EAAuCe,CAAC,EAAxC,EAA4C;AACxC,cAAA,KAAI,CAACvB,QAAL,CAAcqB,eAAd,CAA8B,KAAI,CAACpB,UAAL,CAAgBuB,aAA9C,EAA6D,KAAI,CAACtB,UAAlE;;AAEA,oBAAM;AAAA;AAAA,kCAAM,KAAI,CAACO,YAAX,CAAN;AACH;AAL0C;AAM9C;;AArDsE,O","sourcesContent":["import { Node, Vec2 } from \"cc\";\r\nimport { Empty } from \"../../../Menu/ModalWindows/Upgrades/UpgradesModalWindow\";\r\nimport { ISignal } from \"../../../Services/EventSystem/ISignal\";\r\nimport { GameTimer } from \"../../../Services/GameTimer\";\r\nimport { delay } from \"../../../Services/Utils/AsyncUtils\";\r\nimport { WaveLauncherSettings } from \"../../Data/GameSettings\";\r\nimport { IProjectileLauncherSignaler } from \"../IProjectileLauncherSignaler\";\r\nimport { ProjectileCollision } from \"../ProjectileCollision\";\r\nimport { ProjectileData } from \"./ProjectileData\";\r\nimport { ProjectileLauncher } from \"./ProjectileLauncher\";\r\n\r\nexport class WaveProjectileLauncher implements IProjectileLauncherSignaler {\r\n    private currentUpgrade = 0;\r\n    private wavesToShootPerUpgrade = 0;\r\n    private fireTimer: GameTimer;\r\n    private wavesToShoot: number;\r\n    private wavesDelayMs: number;\r\n\r\n    public constructor(\r\n        private launcher: ProjectileLauncher,\r\n        private playerNode: Node,\r\n        private directions: Vec2[],\r\n        settings: WaveLauncherSettings,\r\n        projectileData: ProjectileData\r\n    ) {\r\n        this.wavesToShootPerUpgrade = settings.wavesToShootPerUpgrade;\r\n\r\n        this.fireTimer = new GameTimer(settings.launcher.cooldown);\r\n        this.wavesToShoot = settings.launcher.wavesToShoot;\r\n        this.wavesDelayMs = settings.launcher.wavesDelayMs;\r\n\r\n        launcher.init(settings.launcher.projectileLifetime, settings.launcher.projectileSpeed, projectileData.damage, projectileData.pierces);\r\n    }\r\n\r\n    public get ProjectileCollisionEvent(): ISignal<ProjectileCollision> {\r\n        return this.launcher.ProjectileCollisionEvent;\r\n    }\r\n\r\n    public get ProjectileLaunchedEvent(): ISignal {\r\n        return this.launcher.ProjectileLaunchedEvent;\r\n    }\r\n\r\n    public gameTick(deltaTime: number): void {\r\n        if (this.currentUpgrade == 0) return;\r\n\r\n        this.launcher.gameTick(deltaTime);\r\n        this.fireTimer.gameTick(deltaTime);\r\n\r\n        if (this.fireTimer.tryFinishPeriod()) {\r\n            this.fireProjectiles();\r\n        }\r\n    }\r\n\r\n    public upgrade(): void {\r\n        this.currentUpgrade++;\r\n        this.wavesToShoot += this.wavesToShootPerUpgrade;\r\n    }\r\n\r\n    private async fireProjectiles(): Promise<void> {\r\n        for (let i = 0; i < this.wavesToShoot; i++) {\r\n            this.launcher.fireProjectiles(this.playerNode.worldPosition, this.directions);\r\n\r\n            await delay(this.wavesDelayMs);\r\n        }\r\n    }\r\n}\r\n"]}